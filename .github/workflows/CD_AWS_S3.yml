# This is a basic workflow to help you get started with Actions

name: CD_AWS_S3

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ homolog, develop, prod, sam-deploy ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_WEB:
      name: Build Flutter (WEB)
      runs-on: ubuntu-latest
      environment: ${{ github.ref_name }}
      permissions:
        id-token: write
        contents: write


      steps:
         - name: Checkout code
           uses: actions/checkout@v2
         - name: Setup Java Version
           uses: actions/setup-java@v1
           with:
             java-version: "12.x"
         - name: Setup Flutter Version
           uses: subosito/flutter-action@v1
           with:
             flutter-version: '3.3.10'
             channel: "stable"
         - name: Get flutter dependencies
           run: flutter pub get
           
         - name: rename sw file
           if: github.ref == 'refs/heads/prod'
           run: mv web/firebase-messaging-sw-prod.js web/firebase-messaging-sw.js
           
         - name: Setup AWS Credentials
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-region: us-east-1
             role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsRole
             role-session-name: github-action
          
         - run: flutter build web -t lib/${{vars.MAIN_FLAVOR}}.dart --web-renderer canvaskit --release --dart-define=MSS_USER_BASE_URL=${{vars.MSS_USERS_ENDPOINT}} --dart-define=MSS_ACTIVITIES_BASE_URL=${{vars.MSS_ACTIVITIES_ENDPOINT}} --dart-define=S3_BASE_URL=${{vars.AWS_BUCKET_ASSETS}} --dart-define=MSS_CERTIFICATE_BASE_URL=${{vars.MSS_CERTIFICATE_BASE_URL}} --dart-define=SPONSOR_FORM_REQUEST_URL=${{vars.SPONSOR_FORM_REQUEST_URL}} --dart-define=ENV=${{vars.ENV}}

         - name: Setup SAM
           uses: aws-actions/setup-sam@v2

         - name: Build SAM          
           run: |
            sam build --template-file samtemplate.yml --use-container
            sam deploy --template-file samtemplate.yml --stack-name SmileFront2023SamStack --region ${{ vars.AWS_S3_BUCKET_REGION }} -no-fail-on-empty-changeset

         - name: Set CloudFront ID
           run: echo "CLOUD_FRONT_ID=$(aws cloudformation describe-stacks --stack-name SmileFront2023SamTestStack --query "Stacks[0].Outputs[?OutputKey==`CloudfrontId`].OutputValue" --output text)" >> $GITHUB_ENV
         - name: Set AWS Bucket
           run: echo "AWS_BUCKET=$(aws cloudformation describe-stacks --stack-name SmileFront2023SamTestStack --query "Stacks[0].Outputs[?OutputKey==`AwsBucket`].OutputValue" --output text)" >> $GITHUB_ENV
         
         - name: Upload to S3
           run: aws s3 cp build/web s3://${{ vars.AWS_BUCKET }}/ --recursive --region ${{ vars.AWS_S3_BUCKET_REGION }}
        
         - name: Clear CDN cache
           run: aws cloudfront create-invalidation --distribution-id ${{vars.CLOUD_FRONT_ID}} --paths "/*" --region us-east-1
