// Mocks generated by Mockito 5.3.2 from annotations
// in smile_front/test/app/modules/dashboard/presenter/controller/user/more_info_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mobx/mobx.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:smile_front/app/modules/dashboard/domain/usecases/get_user_subscribed_activities.dart'
    as _i4;
import 'package:smile_front/app/modules/dashboard/domain/usecases/send_confirm_attendance.dart'
    as _i9;
import 'package:smile_front/app/modules/dashboard/domain/usecases/subscribe_activities.dart'
    as _i2;
import 'package:smile_front/app/modules/dashboard/domain/usecases/unsubscribe_activities.dart'
    as _i3;
import 'package:smile_front/app/modules/dashboard/presenter/controllers/user/user_subscription_controller.dart'
    as _i6;
import 'package:smile_front/app/shared/models/enrolls_activity_model.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSubscribeActivityInterface_0 extends _i1.SmartFake
    implements _i2.SubscribeActivityInterface {
  _FakeSubscribeActivityInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnsubscribeActivityInterface_1 extends _i1.SmartFake
    implements _i3.UnsubscribeActivityInterface {
  _FakeUnsubscribeActivityInterface_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserSubscribedActivitiesInterface_2 extends _i1.SmartFake
    implements _i4.GetUserSubscribedActivitiesInterface {
  _FakeGetUserSubscribedActivitiesInterface_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_3 extends _i1.SmartFake
    implements _i5.ReactiveContext {
  _FakeReactiveContext_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserEnrollmentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserEnrollmentController extends _i1.Mock
    implements _i6.UserEnrollmentController {
  MockUserEnrollmentController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SubscribeActivityInterface get subscribeActivity => (super.noSuchMethod(
        Invocation.getter(#subscribeActivity),
        returnValue: _FakeSubscribeActivityInterface_0(
          this,
          Invocation.getter(#subscribeActivity),
        ),
      ) as _i2.SubscribeActivityInterface);
  @override
  _i3.UnsubscribeActivityInterface get unsubscribeActivity =>
      (super.noSuchMethod(
        Invocation.getter(#unsubscribeActivity),
        returnValue: _FakeUnsubscribeActivityInterface_1(
          this,
          Invocation.getter(#unsubscribeActivity),
        ),
      ) as _i3.UnsubscribeActivityInterface);
  @override
  _i4.GetUserSubscribedActivitiesInterface get getUserActivities =>
      (super.noSuchMethod(
        Invocation.getter(#getUserActivities),
        returnValue: _FakeGetUserSubscribedActivitiesInterface_2(
          this,
          Invocation.getter(#getUserActivities),
        ),
      ) as _i4.GetUserSubscribedActivitiesInterface);
  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);
  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i7.EnrollsActivityModel> get subscribedActivities =>
      (super.noSuchMethod(
        Invocation.getter(#subscribedActivities),
        returnValue: <_i7.EnrollsActivityModel>[],
      ) as List<_i7.EnrollsActivityModel>);
  @override
  set subscribedActivities(
          List<_i7.EnrollsActivityModel>? _subscribedActivities) =>
      super.noSuchMethod(
        Invocation.setter(
          #subscribedActivities,
          _subscribedActivities,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i7.EnrollsActivityModel> get allActivitiesWithEnrollments =>
      (super.noSuchMethod(
        Invocation.getter(#allActivitiesWithEnrollments),
        returnValue: <_i7.EnrollsActivityModel>[],
      ) as List<_i7.EnrollsActivityModel>);
  @override
  set allActivitiesWithEnrollments(
          List<_i7.EnrollsActivityModel>? _allActivitiesWithEnrollments) =>
      super.noSuchMethod(
        Invocation.setter(
          #allActivitiesWithEnrollments,
          _allActivitiesWithEnrollments,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_3(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);
  @override
  void setIsLoading(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setIsLoading,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<dynamic> getUserAllActivitiesWithEnrollment() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserAllActivitiesWithEnrollment,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
}

/// A class which mocks [ConfirmAttendanceUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfirmAttendanceUsecase extends _i1.Mock
    implements _i9.ConfirmAttendanceUsecase {
  MockConfirmAttendanceUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<dynamic> call(
    String? confirmAttendanceCode,
    String? activityCode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            confirmAttendanceCode,
            activityCode,
          ],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
}
