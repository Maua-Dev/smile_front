// Mocks generated by Mockito 5.1.0 from annotations
// in smile_front/test/app/modules/dashboard/presenter/controller/user/user_dashboard_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:smile_front/app/modules/auth/domain/repositories/secure_storage_interface.dart'
    as _i5;
import 'package:smile_front/app/modules/dashboard/domain/repositories/activities_repository_interface.dart'
    as _i2;
import 'package:smile_front/app/modules/dashboard/domain/repositories/user_repository_interface.dart'
    as _i6;
import 'package:smile_front/app/modules/dashboard/infra/models/user_change_data_model.dart'
    as _i7;
import 'package:smile_front/app/shared/models/activity_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ActivitiesRepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivitiesRepositoryInterface extends _i1.Mock
    implements _i2.ActivitiesRepositoryInterface {
  MockActivitiesRepositoryInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ActivityModel>> getAllActivities() =>
      (super.noSuchMethod(Invocation.method(#getAllActivities, []),
              returnValue:
                  Future<List<_i4.ActivityModel>>.value(<_i4.ActivityModel>[]))
          as _i3.Future<List<_i4.ActivityModel>>);
  @override
  _i3.Future<List<_i4.ActivityModel>> getUserSubscribedActivities() =>
      (super.noSuchMethod(Invocation.method(#getUserSubscribedActivities, []),
              returnValue:
                  Future<List<_i4.ActivityModel>>.value(<_i4.ActivityModel>[]))
          as _i3.Future<List<_i4.ActivityModel>>);
  @override
  _i3.Future<dynamic> createActivity(_i4.ActivityModel? activityToCreate) =>
      (super.noSuchMethod(
          Invocation.method(#createActivity, [activityToCreate]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> editActivity(_i4.ActivityModel? activityToEdit) =>
      (super.noSuchMethod(Invocation.method(#editActivity, [activityToEdit]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> removeActivity(String? id) =>
      (super.noSuchMethod(Invocation.method(#removeActivity, [id]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> subscribeActivity(_i4.ActivityModel? activity,
          String? activityId, DateTime? activityDate) =>
      (super.noSuchMethod(
          Invocation.method(
              #subscribeActivity, [activity, activityId, activityDate]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> unsubscribeActivity(
          String? activityId, DateTime? activityDate) =>
      (super.noSuchMethod(
          Invocation.method(#unsubscribeActivity, [activityId, activityDate]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
}

/// A class which mocks [SecureStorageInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageInterface extends _i1.Mock
    implements _i5.SecureStorageInterface {
  MockSecureStorageInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveAccessToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#saveAccessToken, [token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveRefreshToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#saveRefreshToken, [token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<String?> getAccessToken() =>
      (super.noSuchMethod(Invocation.method(#getAccessToken, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(Invocation.method(#getRefreshToken, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<void> saveAccessLevel(String? accessLevel) =>
      (super.noSuchMethod(Invocation.method(#saveAccessLevel, [accessLevel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveName(String? name) =>
      (super.noSuchMethod(Invocation.method(#saveName, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveSocialName(String? socialName) =>
      (super.noSuchMethod(Invocation.method(#saveSocialName, [socialName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveCertificateWithSocialName(
          bool? certificateWithSocialName) =>
      (super.noSuchMethod(
          Invocation.method(
              #saveCertificateWithSocialName, [certificateWithSocialName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<String?> getAccessLevel() =>
      (super.noSuchMethod(Invocation.method(#getAccessLevel, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getName() =>
      (super.noSuchMethod(Invocation.method(#getName, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getSocialName() =>
      (super.noSuchMethod(Invocation.method(#getSocialName, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<bool?> getCertificateWithSocialName() =>
      (super.noSuchMethod(Invocation.method(#getCertificateWithSocialName, []),
          returnValue: Future<bool?>.value()) as _i3.Future<bool?>);
  @override
  _i3.Future<void> cleanSecureStorage() =>
      (super.noSuchMethod(Invocation.method(#cleanSecureStorage, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [UserRepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepositoryInterface extends _i1.Mock
    implements _i6.UserRepositoryInterface {
  MockUserRepositoryInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> changeData(
          _i7.UserChangeDataModel? userChangeDataModel) =>
      (super.noSuchMethod(Invocation.method(#changeData, [userChangeDataModel]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
}
